// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blokhinnv/gophkeeper/internal/client/service (interfaces: SyncService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/blokhinnv/gophkeeper/internal/client/models"
	models0 "github.com/blokhinnv/gophkeeper/internal/server/models"
	resty "github.com/go-resty/resty/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockSyncService is a mock of SyncService interface.
type MockSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockSyncServiceMockRecorder
}

// MockSyncServiceMockRecorder is the mock recorder for MockSyncService.
type MockSyncServiceMockRecorder struct {
	mock *MockSyncService
}

// NewMockSyncService creates a new mock instance.
func NewMockSyncService(ctrl *gomock.Controller) *MockSyncService {
	mock := &MockSyncService{ctrl: ctrl}
	mock.recorder = &MockSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncService) EXPECT() *MockSyncServiceMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockSyncService) GetClient() *resty.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*resty.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockSyncServiceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockSyncService)(nil).GetClient))
}

// Register mocks base method.
func (m *MockSyncService) Register(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockSyncServiceMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSyncService)(nil).Register), arg0, arg1)
}

// Sync mocks base method.
func (m *MockSyncService) Sync(arg0 string, arg1 []models0.CollectionName) (*models.SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", arg0, arg1)
	ret0, _ := ret[0].(*models.SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockSyncServiceMockRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncService)(nil).Sync), arg0, arg1)
}

// Unregister mocks base method.
func (m *MockSyncService) Unregister(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unregister", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unregister indicates an expected call of Unregister.
func (mr *MockSyncServiceMockRecorder) Unregister(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockSyncService)(nil).Unregister), arg0, arg1)
}
