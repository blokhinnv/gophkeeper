// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blokhinnv/gophkeeper/internal/server/service (interfaces: SyncService)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/blokhinnv/gophkeeper/internal/server/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSyncService is a mock of SyncService interface.
type MockSyncService struct {
	ctrl     *gomock.Controller
	recorder *MockSyncServiceMockRecorder
}

// MockSyncServiceMockRecorder is the mock recorder for MockSyncService.
type MockSyncServiceMockRecorder struct {
	mock *MockSyncService
}

// NewMockSyncService creates a new mock instance.
func NewMockSyncService(ctrl *gomock.Controller) *MockSyncService {
	mock := &MockSyncService{ctrl: ctrl}
	mock.recorder = &MockSyncServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncService) EXPECT() *MockSyncServiceMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockSyncService) Register(arg0 *models.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0)
}

// Register indicates an expected call of Register.
func (mr *MockSyncServiceMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSyncService)(nil).Register), arg0)
}

// Signal mocks base method.
func (m *MockSyncService) Signal(arg0 *models.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signal", arg0)
}

// Signal indicates an expected call of Signal.
func (mr *MockSyncServiceMockRecorder) Signal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signal", reflect.TypeOf((*MockSyncService)(nil).Signal), arg0)
}

// Unregister mocks base method.
func (m *MockSyncService) Unregister(arg0 *models.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", arg0)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockSyncServiceMockRecorder) Unregister(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockSyncService)(nil).Unregister), arg0)
}
